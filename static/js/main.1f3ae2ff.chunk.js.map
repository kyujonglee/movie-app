{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","axios","get","then","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RA2BA,SAASA,EAATC,GAAqC,IAAdC,EAAcD,EAAdC,OAAOC,EAAOF,EAAPE,IAC5B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAeMC,MA3Cf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAON,EAA4BY,EAA5BZ,OAAQa,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OACVd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAGnCd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAmBO,uBCoCzBI,6MA1CbC,MAAQ,KAMRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GAAK,OACxCrB,EAAAC,EAAAC,cAACoB,EAAD,CACElB,MAAOiB,EAAME,cACbzB,OAAQuB,EAAMG,mBACdb,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,SAChBG,IAAKM,EAAMI,UAMjBC,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,IACJC,IAAI,6DACJC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKA,KAAKrB,SAC5BsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA3B5BG,KAAKpB,8CA+BL,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZyC,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBAtClC6B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.1f3ae2ff.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ title, poster, genres, synopsis }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movies__Columns\">\n        <MoviePoster poster={poster} alt={title}/>\n      </div>\n      <div className=\"Movies__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movies__Genres\">\n          {genres.map((genre, index) => (\n            <MovieGenre genre={genre} key={index} />\n          ))}\n        </div>\n        <p className=\"Movie__Synopsis\">{synopsis}</p>\n      </div>\n    </div>\n  );\n}\n\n// functional component\n// stateless component\n// state가 필요없고 props만 존재할 때 이를 stateless component 라 함.\n// function render 존재 x , 라이프 사이클 존재 x\nfunction MoviePoster({ poster,alt }) {\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\n}\n\nfunction MovieGenre({ genre }) {\n  return <span className=\"Movie__Genre\">{genre} </span>;\n}\n\nMovie.propTypes = {\n  title: propTypes.string.isRequired,\n  poster: propTypes.string.isRequired,\n  genres: propTypes.array.isRequired,\n  synopsis: propTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n  poster: propTypes.string.isRequired,\n  alt : propTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\nimport axios from \"axios\";\n\n// 추가해야 할 것!\n// 1. css 적용(Style Component 인강을 들은 후!)\n// 2. 무한스크롤 적용\n// 3. fetch 대신해서 Axios 적용\nclass App extends Component {\n  // Render : componentWillMount() => render() -> componentDidMount()\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => (\n      <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id}\n      />\n    ));\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return axios\n      .get(\"https://yts.lt/api/v2/list_movies.json?sort_by=like_count\")\n      .then(json => json.data.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}